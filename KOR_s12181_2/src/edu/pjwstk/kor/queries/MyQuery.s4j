package edu.pjwstk.kor.queries;

import java.util.*;
import com.db4o.ObjectContainer;
import edu.pjwstk.kor.model.*;
import edu.pjwstk.kor.model.data.*;
import java.sql.Struct;
import java.text.SimpleDateFormat;

public class MyQuery{
	
	private DataGenerator data;
	private ObjectContainer dataBase;
	
	public static void main(String[] args) {
		try{
		MyQuery mainOb = new MyQuery();
		} catch (Exception e){
			throw new RuntimeException();
		}
	}
	
	public MyQuery() throws Exception {
		data = new DataGenerator();
		dataBase = data.getConnection();
		//query01();
		//query02();
		//query03();
		//query04();
		//query15();
		//query14();
		//query13();
		//query12();
		//query11();
		//query10();
		//query09();
		//query08();
		//query07(5000);
		//query06();
//		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
//		String dateString = format.format( new Date());
//		Date date_param = format.parse( "2010-10-31" );  
//		query05(date_param);
		query04();
//		query03();
//		query02();
//		query01();
		

		dataBase.close();
	}
	
	public void query21(){
		Collection<String> avgWeight = #{ dataBase.(Packagement.sizeType) };
		System.out. println(avgWeight);
	}
	
	public void query22(){
		Collection<Packagement> avgWeight = #{ dataBase.(Packagement) };
		System.out. println(avgWeight);
	}
	
	public void query23(){
		Collection<Double> avgWeight = #{ dataBase.(Packagement.weight) };
		System.out. println(avgWeight);
	}
	
	public void query24(){
		Double avgWeight = #{ dataBase.(avg(Packagement.weight)) };
		System.out. println(avgWeight);
	}
	
	public void query15(){
		Double avgWeight = #{ dataBase.(avg(Shipment.Packagement.weight) as SredniaWagaPaczki) };
		System.out. println(avgWeight);
	}
		
	public void query14(){
		//Double percentComplained = #{ dataBase.(  0.00 + count(Shipment where isComplaint == true ) / count(Shipment where 1==1 ) ) };
		Integer countComplained = #{ dataBase.( count(Shipment where isComplaint == true ) ) };
		//Integer countNonComplained = #{ dataBase.( count(Shipment where isComplaint == false ) ) };
		//Integer countAll = #{ dataBase.( count(Shipment where 1==1 ) ) };
		//System.out. println(percentComplained);
		System.out. println(countComplained);
		//System.out. println(countNonComplained);
		//System.out. println(countAll);
		
		Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> complainedShipment = #{ dataBase.( (Shipment as sh where sh.isComplaint == true join Sender as sn join Receiver as rc ).(sh.sendDate as DataWyslania, sn.surname as Od, sh.deliveredDate as DataDostarczenia, rc.surname as Do) ) };
		System.out. println(complainedShipment);
		
	}
	
	public void query13(){
		//Integer shpmnts = #{ dataBase.(count(Shipment) as iloscPaczek) };
		//Integer employees = #{ dataBase.(count(Employee) as iloscPracownikow) };
		Integer tmpEmpByPckg = #{ dataBase.(count(Shipment as sh where sh.emplyReceiving.isTemporary == true or sh.emplyDelivering.isTemporary == true) as iloscObsluzonychPrzezTymczasowych) };
		Integer nonTmpEmpByPckg = #{ dataBase.(count(Shipment as sh where sh.emplyReceiving.isTemporary == false or sh.emplyDelivering.isTemporary == false) as iloscObsluzonychPrzezStalych) };
		//System.out. println(shpmnts);
		//System.out. println(employees);
		System.out. println(tmpEmpByPckg);
		System.out. println(nonTmpEmpByPckg);
	}
	
	
	public void query12(){
		Collection<Receiver> rcvrsWithSecAdress = #{ dataBase.(Receiver where secondaryAdress != 0 ) };
		System.out. println(rcvrsWithSecAdress);
	}
	
	public void query11(){
		
		Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> empsWithDelayedPckgs =
		//Integer empsWithDelayedPckgs =
			//#{ dataBase.(count(Shipment as sh where sh.isComplaint == true))};
			//#{ dataBase.(Shipment as sh where sh.isComplaint == true).(sh.emplyDelivering.surname as surname, sh.emplyDelivering.name as name, count(sh) as ile)};
			//#{ dataBase.(Employee as em join Shipment as sh where sh.isComplaint == true ).(unique (em.surname as surname, em.name as name) , sh.sendDate as dataPaczki ) };
			#{ dataBase.(Shipment as sh where sh.isComplaint == true ).( sh.sendDate as dataWys , sh.deliveredDate as dataDost , sh.emplyDelivering.name as imiePrac, sh.emplyDelivering.surname as nazwiskoPrac) };
				System.out. println(empsWithDelayedPckgs);
			
	}
	
	public void query10(){
		Double dealyedPymnts = #{ dataBase.(( 0.0 + count(Payment where isDelayed == true and isPaied == true)) / ( count(Payment where isDelayed == false and isPaied == true) + count(Payment where isDelayed == true and isPaied == true )  )  ) };
		//Double dealyedPymnts1 = #{ dataBase.( 0.0 + count(Payment where isDelayed == true and isPaied == true) ) };
		//Double dealyedPymnts2 = #{ dataBase.( 0.0 + ( count(Payment where isDelayed == false and isPaied == true) + count(Payment where isDelayed == true and isPaied == true )  )  ) };
		//System.out. println(dealyedPymnts1);
		//System.out. println(dealyedPymnts2);
		System.out. println(dealyedPymnts);
	}
	
	public void query09(){
		Double avgShpmnt = #{ dataBase.(avg(Shipment.Payment.PaymentType.paymentPrice) as sredniaCenaPrzesylki) };
		Double avgPckgmnt = #{ dataBase.(avg(Shipment.Packagement.PaymentType.paymentPrice) as sredniaCenaPaczki) };
		System.out. println(avgShpmnt);
		System.out. println(avgPckgmnt);
	}
	
	public void query08(){
		//Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> citiesByNumberOfReceivers = 
		Collection<String> citiesByNumberOfReceivers =
		//Collection<Integer> citiesByNumberOfReceivers =
				#{ dataBase.(unique(Receiver.Adress.city) as miasto)};
		System.out. println(citiesByNumberOfReceivers);
	}
	
	public void query07(Integer param){
		//Collection<Integer> emplWithSalaryOver =
		//Collection<Employee> emplWithSalaryOver = 
		Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> emplWithSalaryOver =
				#{ dataBase.( Employee as em where em.salary < param  ).(em.name as Imie,  em.surname as Nazwisko, em.salary as Pensja) };
		System.out. println(emplWithSalaryOver);
	}
	
	public void query06(){
		//Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> avgNumberOfPackagesPerSender = 
		Double avgNumberOfPackagesPerSender =
				#{ dataBase.( (0.0 + count(Shipment)) / count(unique(Shipment.Sender)) ) };
		System.out. println(avgNumberOfPackagesPerSender);
	}
	
	public void query05(Date param){
		//Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> pymntSumsByMonth = 
		//Collection<Payment> pymntSumsFromDate = 
		//Collection<Double> pymntSumsFromDate =
		//Double pymntSumsFromDate =
				//#{ dataBase.(Payment as pm where pm.paymentDate > param).(pm.paymentType.paymentPrice) };
				//#{ dataBase.(Payment as pm where pm.paymentDate > param).(pm.paymentType.paymentPrice as kwota).(sum(kwota)) };
				//#{ dataBase.(Payment as pm where pm.paymentDate > param).(sum(pm.PaymentType.paymentPrice) + 0.0) };
				//#{ dataBase.(0.0 + sum(Payment.PaymentType.paymentPrice)) };
		Double pymntSumsFromDate2 =
				#{ dataBase.(0.0 + sum((Payment as pm where pm.paymentDate > param).pm.PaymentType.paymentPrice ) ) };
		//System.out. println(pymntSumsFromDate);
		System.out. println(pymntSumsFromDate2);
		
	}
	
	public void query04(){
		//Collection<pl.wcislo.sbql4j.java.model.runtime.Struct> avgNumberOfPackagesPerSender = 
		Double avgNumberOfPackagesPerSender =
				#{ dataBase.( (0.0 + count(Shipment)) / count(unique(Shipment.Sender)) ) };
		System.out. println(avgNumberOfPackagesPerSender);
	}
}